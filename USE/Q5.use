model Q5

class Person
attributes
birthYear : Integer
deathYear : Integer
age : Integer derive:
    if (self.community.clock.NOW <> null) then
        if (self.community.clock.NOW < self.birthYear) then null
        else
            if (self.community.clock.NOW >=self.birthYear and self.community.clock.NOW < self.deathYear) then
                self.community.clock.NOW - self.birthYear
            else
                if (self.community.clock.NOW >=self.birthYear and self.community.clock.NOW >= self.deathYear) then
                    self.deathYear - self.birthYear
                else null
                endif
            endif
        endif
    else null
    endif

estadoMarital : String derive:
    if (self.husband->size() > 0) then 'Casada'
    else
        if (self.wife->size() > 0) then 'Casado'
        else    'Soltere'
        endif
    endif
isDead : Boolean derive: 
    self.deathYear <> null implies 
        self.community.clock.NOW >= self.deathYear and self.community.clock.NOW >= self.birthYear
estadoEdad : String derive : 
    if (self.age<>null and self.age>=0) then 
        if (self.age >=0 and self.age < self.community.edadNinoJoven) then 'Nino' 
        else 
            if (self.age >= self.community.edadNinoJoven and self.age < self.community.edadJovenAdulto) then 'Joven' 
            else
                if (self.age >= self.community.edadJovenAdulto and self.age < self.community.edadAdultoAnciano) then 'Adulto' 
                else
                    if (self.age >= self.community.edadAdultoAnciano) then 'Anciano' 
                    else 'Desconocido'
                    endif
                endif
            endif
        endif
    else 'No nacido'
    endif

    operations
    
    isMarried(): Boolean =
    self.husband->exists(m | m.startYear <> null and m.husband->size() >= 1) or
    self.wife->exists(m | m.startYear <> null and m.wife->size() >= 1) --creo que esta ultima linea se podria quitar

    marriages(): Integer =
    self.husband->size() + self.wife->size()
end

class Marriage
attributes
startYear : Integer
endYear : Integer
end

class Community
attributes
edadNinoJoven : Integer
edadJovenAdulto : Integer
edadAdultoAnciano : Integer
end

class Clock
attributes
NOW: Integer
--started : Boolean -> No se como usarlo honestamente
end

association marryWifeHusband between
Person[1] role wife
Marriage[*] role husband
end

association marryHusbandWife between
Person[1] role husband
Marriage[*] role wife
end

association casa between
Person[*] role solicita
Person[*] role solicitado
end

association divorcio between
Person[0..1] role solicitaDiv
Person[0..1] role solicitadoDiv
end

composition perteneceAComunidad between
Community[1] role community --base
Person[*] role person
end

aggregation tiempo between
Community[*] role community --base
Clock[1] role clock
end

constraints
-------------------------------------------------
-------------RESTRICCIONES ALÉTICAS--------------
-------------------------------------------------


--Una persona no puede fallecer antes de nacer.
context Person inv personaNoPuedeMorirAntesDeNacer:
    self.deathYear <> null and self.birthYear <> null implies
        self.deathYear >= self.birthYear

--Un matrimonio no puede acabar antes de empezar.
context Marriage inv matrimonioNoPuedeAcabarAntesDeEmpezar:
    self.endYear<>null implies
        self.endYear >= self.startYear

--Los muertos no pueden estar casados.
context Person inv personaMuertaNoPuedeEstarCasada:
    self.isDead = true implies self.estadoMarital = 'Soltere'

--No se puede nacer en el futuro: Clock.NOW tiene que ser mayor o igual que cualquier fecha de nacimiento.
context Community inv noSePuedeNacerEnElFuturo:
    self.clock.NOW <> null implies
        self.person->forAll(p | p.birthYear <> null implies p.birthYear <= self.clock.NOW)

--No puede haber matrimonios futuros (“acordados”): Clock.NOW tiene que ser siempre mayor o igual que cualquier fecha de comienzo de un matrimonio.
context Community inv noHayMatrimoniosAcordados:
    self.clock <> null implies
        (self.person.husband<> null implies self.person.husband->forAll(h | h.startYear <= self.clock.NOW)) and
        (self.person.wife <> null implies self.person.wife -> forAll(w | w.startYear <= self.clock.NOW))

--No se puede divorciar una persona de alguien con quien no esté actualmente casado.
context Person inv noPuedesDivorciarteSiNoEstasCasado:
    self.solicitaDiv <> null implies
    (self.wife.wife->includes(self) or 
    self.husband.husband->includes(self))

-------------------------------------------------
-------------RESTRICCIONES DEÓNTICAS-------------
-------------------------------------------------

--No puede haber más que un reloj en toda la aplicación (y por tanto compartido por todas las comunidades)
context Clock inv NumReloj:
Clock.allInstances()->size=1

--Una persona no puede estar casada consigo misma 1.
context Person inv autoMatrimonioWife:
self.wife <> null implies
self.wife -> select(m | m.wife = self) -> isEmpty()         --metodo 1
--self.wife.wife -> forAll(p | self <> p)                   --metodo 2

--Una persona no puede estar casada consigo misma 2.
context Person inv autoMatrimonioHusband:
self.husband <> null implies
self.husband -> select(m | m.husband = self) -> isEmpty()   --metodo 1
--self.husband.husband -> forAll(p | self <> p)             --metodo 2


--Monogamia: Una persona no puede tener más de un matrimonio activo en un momento dado.

--Los niños no pueden estar casados.

--No se permite ni la eutanasia ni el suicidio.

--La edad en las que las personas cambian de niño a joven, de joven a adulto o de adulto a anciano puede
--depender de la comunidad a la que pertenezca la persona.

-------------------------------------------------
-------------RESTRICCIONES ADICIONALES-----------
-------------------------------------------------

--Una persona solo puede solicitar matrimonio a otra si no está casada
--no se si esta bien, habria que revisarlo
context Person inv solicitaMatrimonioSiNoEstaCasada:
    self.solicita->forAll(noCasada | noCasada.isMarried() = false)

--El año de muerte de una persona no puede ser mayor que el año de su nacimiento
context Person inv fechaMuerteNoPuedeSerMayorAlAnoDeNacimiento:
    self.deathYear > self.birthYear

--La edad no puede ser null
context Person inv edadNoPuedeSerNull:
    self.age <> null



